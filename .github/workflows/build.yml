name: Build and Publish

on:
  push:
    tags:
      - 'v*'  # Only trigger on tags starting with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v0.1.0, v0.1.0a1, v0.1.0b1, v0.1.0rc1, v0.2.0a1)'
        required: true
        type: string

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Verify CI status
      shell: bash
      run: |
        echo "Verifying CI workflow status for commit: $GITHUB_SHA"

        # Query CI workflow status for the specific commit using gh run list
        # This avoids Windows Git Bash path rewriting issues with gh api
        CI_STATUS=$(gh run list \
          --workflow="CI" \
          --json conclusion,headSha \
          --jq ".[] | select(.headSha == \"$GITHUB_SHA\") | .conclusion" \
          | head -1)

        echo "CI workflow status: $CI_STATUS"

        if [ "$CI_STATUS" = "success" ]; then
          echo "✅ CI workflow passed - proceeding with build"
        elif [ "$CI_STATUS" = "failure" ]; then
          echo "❌ CI workflow failed - aborting build"
          echo "Please ensure all CI checks pass before building"
          exit 1
        elif [ -z "$CI_STATUS" ]; then
          echo "⚠️ No CI workflow found for this commit"
          echo "This may indicate the commit was not properly tested"
          echo "Please ensure CI workflow runs and passes before building"
          exit 1
        else
          echo "⏳ CI workflow status: $CI_STATUS"
          echo "Please wait for CI workflow to complete successfully before building"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      timeout-minutes: 3

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
      timeout-minutes: 3

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
      timeout-minutes: 5

    - name: Run quality checks
      run: |
        uv run ruff check . --output-format=github
        uv run ruff format --check --diff .
        uv run pytest --tb=short
        uv run mypy src/
      timeout-minutes: 10

  build:
    needs: quality-check  # Only build after quality check passes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for version generation

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
      timeout-minutes: 3

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
      timeout-minutes: 5

    - name: Validate tag format
      id: validate_tag
      shell: bash
      run: |
        # Get tag from push event or workflow dispatch
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        fi

        echo "Git tag: $TAG"

        # Unified version validation function
        validate_version_format() {
          local version="$1"
          local version_type="$2"

          # Simplified regex patterns for better readability
          local git_tag_pattern="^v[0-9]+\.[0-9]+\.[0-9]+(\.(dev[0-9]+|a[0-9]+|b[0-9]+|rc[0-9]+))?$"
          local generated_version_pattern="^[0-9]+\.[0-9]+\.[0-9]+(\.(dev[0-9]+|a[0-9]+|b[0-9]+|rc[0-9]+))?(-[0-9]+-g[0-9a-f]+)?$"

          if [[ "$version_type" == "git_tag" ]]; then
            if [[ $version =~ $git_tag_pattern ]]; then
              echo "✓ Git tag format is valid: $version"
              return 0
            else
              echo "✗ Invalid git tag format: $version"
              echo "Expected format: v{major}.{minor}.{patch}[.{dev|a|b|rc}{N}]"
              echo "Valid examples:"
              echo "  - Stable: v1.0.0, v2.1.3"
              echo "  - Development: v1.0.0.dev1, v1.2.0.dev5"
              echo "  - Alpha: v1.0.0.a1, v1.0.0.a2"
              echo "  - Beta: v1.0.0.b1, v1.0.0.b2"
              echo "  - Release Candidate: v1.0.0.rc1, v1.0.0.rc2"
              return 1
            fi
          elif [[ "$version_type" == "generated" ]]; then
            if [[ $version =~ $generated_version_pattern ]]; then
              echo "✓ Generated version format is valid: $version"
              return 0
            else
              echo "✗ Invalid generated version format: $version"
              echo "Expected format: {major}.{minor}.{patch}[.{dev|a|b|rc}{N}][-{commits}-g{hash}]"
              echo "Valid examples:"
              echo "  - Stable: 1.0.0, 2.1.3"
              echo "  - Development: 1.0.0.dev1, 1.2.0.dev5"
              echo "  - With git suffix: 1.0.0-5-g1a2b3c4, 1.0.0.dev1-2-g5d6e7f8"
              return 1
            fi
          fi
        }

        # Validate git tag format
        if ! validate_version_format "$TAG" "git_tag"; then
          exit 1
        fi

        # Set outputs
        echo "git_tag=$TAG" >> $GITHUB_OUTPUT

    - name: Validate stable release ancestry (for stable releases only)
      if: "!contains(steps.validate_tag.outputs.git_tag, 'dev') && !contains(steps.validate_tag.outputs.git_tag, 'a') && !contains(steps.validate_tag.outputs.git_tag, 'b') && !contains(steps.validate_tag.outputs.git_tag, 'rc')"
      shell: bash
      run: |
        echo "Validating stable release ancestry..."

        # Fetch origin/main to ensure we have latest main branch
        git fetch origin main

        # Check if current tag commit is an ancestor of main
        if git merge-base --is-ancestor $GITHUB_SHA origin/main; then
          echo "✓ Tag commit is an ancestor of main branch - valid for stable release"
        else
          echo "✗ Tag commit is not an ancestor of main branch - stable releases must come from main"
          echo "Current commit: $GITHUB_SHA"
          echo "Main branch head: $(git rev-parse origin/main)"
          exit 1
        fi

    - name: Validate dynamic version generation
      shell: bash
      run: |
        # Test that hatch-vcs can generate version from git tag
        echo "Testing dynamic version generation..."

        # Use git describe to get version
        GENERATED_VERSION=$(git describe --tags --match='v*' | sed 's/^v//')

        echo "Generated version: $GENERATED_VERSION"

        # Skip validation if version generation failed
        if [ "$GENERATED_VERSION" = "0.0.0" ]; then
          echo "⚠ Version generation failed, skipping validation"
          exit 0
        fi

        # Reuse unified validation function from previous step
        validate_version_format() {
          local version="$1"
          local version_type="$2"

          # Simplified regex patterns for better readability
          local git_tag_pattern="^v[0-9]+\.[0-9]+\.[0-9]+(\.(dev[0-9]+|a[0-9]+|b[0-9]+|rc[0-9]+))?$"
          local generated_version_pattern="^[0-9]+\.[0-9]+\.[0-9]+(\.(dev[0-9]+|a[0-9]+|b[0-9]+|rc[0-9]+))?(-[0-9]+-g[0-9a-f]+)?$"

          if [[ "$version_type" == "git_tag" ]]; then
            if [[ $version =~ $git_tag_pattern ]]; then
              echo "✓ Git tag format is valid: $version"
              return 0
            else
              echo "✗ Invalid git tag format: $version"
              echo "Expected format: v{major}.{minor}.{patch}[.{dev|a|b|rc}{N}]"
              echo "Valid examples:"
              echo "  - Stable: v1.0.0, v2.1.3"
              echo "  - Development: v1.0.0.dev1, v1.2.0.dev5"
              echo "  - Alpha: v1.0.0.a1, v1.0.0.a2"
              echo "  - Beta: v1.0.0.b1, v1.0.0.b2"
              echo "  - Release Candidate: v1.0.0.rc1, v1.0.0.rc2"
              return 1
            fi
          elif [[ "$version_type" == "generated" ]]; then
            if [[ $version =~ $generated_version_pattern ]]; then
              echo "✓ Generated version format is valid: $version"
              return 0
            else
              echo "✗ Invalid generated version format: $version"
              echo "Expected format: {major}.{minor}.{patch}[.{dev|a|b|rc}{N}][-{commits}-g{hash}]"
              echo "Valid examples:"
              echo "  - Stable: 1.0.0, 2.1.3"
              echo "  - Development: 1.0.0.dev1, 1.2.0.dev5"
              echo "  - With git suffix: 1.0.0-5-g1a2b3c4, 1.0.0.dev1-2-g5d6e7f8"
              return 1
            fi
          fi
        }

        # Validate generated version format
        if ! validate_version_format "$GENERATED_VERSION" "generated"; then
          exit 1
        fi

        # Enhanced version consistency verification
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')

        # Extract base version from generated version (remove git suffix if present)
        BASE_GENERATED_VERSION=$(echo "$GENERATED_VERSION" | sed 's/-[0-9]\{1,\}-g[0-9a-f]\{1,\}$//')

        echo "Version consistency check:"
        echo "  Git tag: $GIT_TAG"
        echo "  Expected base version: $EXPECTED_VERSION"
        echo "  Generated version: $GENERATED_VERSION"
        echo "  Generated base version: $BASE_GENERATED_VERSION"

        if [ "$BASE_GENERATED_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "✓ Generated version is consistent with git tag"
        else
          echo "✗ Version consistency check failed"
          echo "  Expected: $EXPECTED_VERSION"
          echo "  Got: $BASE_GENERATED_VERSION"
          echo "  This indicates a problem with version generation or tag format"
          exit 1
        fi

    - name: Build wheel
      run: |
        uv build --wheel
        ls -la dist/
      timeout-minutes: 5

    - name: Verify wheel version consistency
      shell: bash
      run: |
        # Extract version from built wheel filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        WHEEL_VERSION=$(echo "$WHEEL_FILE" | sed -n 's/.*coldpack-\([^-]*\)-.*/\1/p')
        echo "Wheel version: $WHEEL_VERSION"

        # Compare with expected version from git tag
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')

        if [ "$WHEEL_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "✓ Wheel version matches git tag: $WHEEL_VERSION"
        else
          echo "✗ Wheel version mismatch - Expected: $EXPECTED_VERSION, Got: $WHEEL_VERSION"
          exit 1
        fi

        # Test install and import
        echo "Testing wheel installation and import..."
        uv pip install dist/*.whl --force-reinstall
        uv run python -c "import coldpack; print(f'coldpack imported successfully, version: {coldpack.__version__}')"
      timeout-minutes: 3

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist/*.whl

  publish:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: dist/

    - name: Final version validation before PyPI publish
      shell: bash
      run: |
        # Get git tag and expected version
        GIT_TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        echo "Git tag: $GIT_TAG"
        echo "Expected PyPI version: $EXPECTED_VERSION"

        # Verify wheel has consistent version
        echo "Verifying wheel version..."
        for wheel in dist/*.whl; do
          WHEEL_VERSION=$(echo "$wheel" | sed -n 's/.*coldpack-\([^-]*\)-.*/\1/p')
          echo "  $wheel -> $WHEEL_VERSION"

          if [ "$WHEEL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "✗ Wheel version mismatch: $wheel"
            echo "  Expected: $EXPECTED_VERSION"
            echo "  Got: $WHEEL_VERSION"
            exit 1
          fi
        done

        echo "✓ All wheels have consistent version: $EXPECTED_VERSION"

        # Final confirmation
        echo "🚀 Ready to publish to PyPI:"
        echo "  Git tag: $GIT_TAG"
        echo "  PyPI version: $EXPECTED_VERSION"
        echo "  Wheel count: $(ls dist/*.whl | wc -l)"
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
        packages-dir: dist/

  github-release:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for changelog

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: dist/

    - name: Get Release Draft
      id: get_release_draft
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Only run for stable releases (merged to main)
      if: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}

    - name: Generate dev release notes
      id: dev_release_notes
      if: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') }}
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$LAST_TAG" ]; then
          # Generate categorized changelog based on conventional commits
          # Initialize release notes (using variable instead of temp file)
          RELEASE_NOTES="## What's Changed"$'\n'

          # Get all commits since last tag - preserve original format with hash
          COMMITS=$(git log --format="%H|%s" --no-merges ${LAST_TAG}..HEAD)

          # Initialize commit collections (replace temp files with variables)
          FEATURES=""
          FIXES=""
          DOCS=""
          PERF=""
          CHORES=""
          TESTS=""
          CI=""
          OTHER=""

          # Initialize category flags (preserve original logic)
          HAS_FEATURES=false
          HAS_FIXES=false
          HAS_DOCS=false
          HAS_PERF=false
          HAS_CHORES=false
          HAS_TESTS=false
          HAS_CI=false
          HAS_OTHER=false

          # Categorize commits (preserve exact original logic)
          while IFS='|' read -r hash subject; do
            if [[ "$subject" =~ ^feat(\(.+\))?: ]]; then
              FEATURES+="- $subject"$'\n'
              HAS_FEATURES=true
            elif [[ "$subject" =~ ^fix(\(.+\))?: ]]; then
              FIXES+="- $subject"$'\n'
              HAS_FIXES=true
            elif [[ "$subject" =~ ^docs(\(.+\))?: ]]; then
              DOCS+="- $subject"$'\n'
              HAS_DOCS=true
            elif [[ "$subject" =~ ^perf(\(.+\))?: ]]; then
              PERF+="- $subject"$'\n'
              HAS_PERF=true
            elif [[ "$subject" =~ ^(chore|refactor|style)(\(.+\))?: ]]; then
              CHORES+="- $subject"$'\n'
              HAS_CHORES=true
            elif [[ "$subject" =~ ^test(\(.+\))?: ]]; then
              TESTS+="- $subject"$'\n'
              HAS_TESTS=true
            elif [[ "$subject" =~ ^ci(\(.+\))?: ]]; then
              CI+="- $subject"$'\n'
              HAS_CI=true
            else
              OTHER+="- $subject"$'\n'
              HAS_OTHER=true
            fi
          done <<< "$COMMITS"

          # Build categorized changelog (preserve exact original order and format)
          if [ "$HAS_FEATURES" = true ]; then
            RELEASE_NOTES+=$'\n'"### 🚀 Features"$'\n\n'"$FEATURES"$'\n'
          fi

          if [ "$HAS_FIXES" = true ]; then
            RELEASE_NOTES+=$'\n'"### 🐛 Bug Fixes"$'\n\n'"$FIXES"$'\n'
          fi

          if [ "$HAS_DOCS" = true ]; then
            RELEASE_NOTES+=$'\n'"### 📚 Documentation"$'\n\n'"$DOCS"$'\n'
          fi

          if [ "$HAS_PERF" = true ]; then
            RELEASE_NOTES+=$'\n'"### ⚡ Performance"$'\n\n'"$PERF"$'\n'
          fi

          if [ "$HAS_CHORES" = true ]; then
            RELEASE_NOTES+=$'\n'"### 🔧 Maintenance"$'\n\n'"$CHORES"$'\n'
          fi

          if [ "$HAS_TESTS" = true ]; then
            RELEASE_NOTES+=$'\n'"### 🧪 Testing"$'\n\n'"$TESTS"$'\n'
          fi

          if [ "$HAS_CI" = true ]; then
            RELEASE_NOTES+=$'\n'"### 🔄 CI/CD"$'\n\n'"$CI"$'\n'
          fi

          if [ "$HAS_OTHER" = true ]; then
            RELEASE_NOTES+=$'\n'"### Other Changes"$'\n\n'"$OTHER"$'\n'
          fi

          RELEASE_NOTES+="**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ github.ref_name }}"
        else
          # Initial release case - preserve exact original format
          RELEASE_NOTES="## What's Changed"$'\n\n'"### 🚀 Features"$'\n\n'"- Initial development release"$'\n\n'"**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}"
        fi

        # Set output (preserve original output method but eliminate temp file)
        {
          echo "notes<<EOF"
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release (Dev/Alpha)
      uses: ncipollo/release-action@v1
      if: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') }}
      with:
        tag: ${{ github.ref_name }}
        name: "${{ github.ref_name }}"
        body: ${{ steps.dev_release_notes.outputs.notes }}
        artifacts: "dist/*.whl"
        draft: false
        prerelease: true
        generateReleaseNotes: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        makeLatest: false

    - name: Create GitHub Release (Stable)
      uses: ncipollo/release-action@v1
      if: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}
      with:
        tag: ${{ github.ref_name }}
        name: "${{ github.ref_name }}"
        body: ${{ steps.get_release_draft.outputs.body }}
        artifacts: "dist/*.whl"
        draft: false
        prerelease: false
        generateReleaseNotes: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        makeLatest: true
