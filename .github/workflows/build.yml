name: Build and Publish

on:
  push:
    tags:
      - 'v*'  # Only trigger on tags starting with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v0.1.0, v0.1.0a1, v0.2.0.dev1)'
        required: true
        type: string

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run quality checks
      run: |
        uv run ruff check . --output-format=github
        uv run ruff format --check --diff .
        uv run pytest --tb=short
        uv run mypy src/

  build:
    needs: quality-check  # Only build after quality check passes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for version generation

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Validate tag format
      id: validate_tag
      shell: bash
      run: |
        # Get tag from push event or workflow dispatch
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        fi

        echo "Git tag: $TAG"

        # Validate tag format (PEP 440 compliant)
        if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.dev[0-9]+|a[0-9]+)?$ ]]; then
          echo "âœ“ Tag format is valid: $TAG"
        else
          echo "âœ— Invalid tag format: $TAG"
          echo "Expected format: v{major}.{minor}.{patch}[.dev{N}|a{N}]"
          echo "Examples: v1.0.0, v1.0.0a1, v1.0.0.dev1"
          exit 1
        fi

        # Set outputs
        echo "git_tag=$TAG" >> $GITHUB_OUTPUT

    - name: Validate dynamic version generation
      shell: bash
      run: |
        # Test that hatch-vcs can generate version from git tag
        echo "Testing dynamic version generation..."

        # Use git describe to get version
        GENERATED_VERSION=$(git describe --tags --match='v*' | sed 's/^v//')

        echo "Generated version: $GENERATED_VERSION"

        # Skip validation if version generation failed
        if [ "$GENERATED_VERSION" = "0.0.0" ]; then
          echo "âš  Version generation failed, skipping validation"
          exit 0
        fi

        # Verify version format is PEP 440 compliant
        if [[ $GENERATED_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.dev[0-9]+|a[0-9]+)?$ ]]; then
          echo "âœ“ Generated version is PEP 440 compliant: $GENERATED_VERSION"
        else
          echo "âœ— Generated version is not PEP 440 compliant: $GENERATED_VERSION"
          exit 1
        fi

        # Verify version matches git tag (remove 'v' prefix from tag)
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        if [ "$GENERATED_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "âœ“ Generated version matches git tag: $GENERATED_VERSION"
        else
          echo "âœ— Version mismatch - Git tag: $GIT_TAG, Generated: $GENERATED_VERSION"
          exit 1
        fi

    - name: Build wheel
      run: |
        uv build --wheel
        ls -la dist/

    - name: Verify wheel version consistency
      shell: bash
      run: |
        # Extract version from built wheel filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        WHEEL_VERSION=$(echo "$WHEEL_FILE" | sed -n 's/.*coldpack-\([^-]*\)-.*/\1/p')
        echo "Wheel version: $WHEEL_VERSION"

        # Compare with expected version from git tag
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')

        if [ "$WHEEL_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "âœ“ Wheel version matches git tag: $WHEEL_VERSION"
        else
          echo "âœ— Wheel version mismatch - Expected: $EXPECTED_VERSION, Got: $WHEEL_VERSION"
          exit 1
        fi

        # Test install and import
        echo "Testing wheel installation and import..."
        uv pip install dist/*.whl --force-reinstall
        uv run python -c "import coldpack; print(f'coldpack imported successfully, version: {coldpack.__version__}')"

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist/*.whl

  publish:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: dist/

    - name: Final version validation before PyPI publish
      shell: bash
      run: |
        # Get git tag and expected version
        GIT_TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        echo "Git tag: $GIT_TAG"
        echo "Expected PyPI version: $EXPECTED_VERSION"

        # Verify wheel has consistent version
        echo "Verifying wheel version..."
        for wheel in dist/*.whl; do
          WHEEL_VERSION=$(echo "$wheel" | sed -n 's/.*coldpack-\([^-]*\)-.*/\1/p')
          echo "  $wheel -> $WHEEL_VERSION"

          if [ "$WHEEL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "âœ— Wheel version mismatch: $wheel"
            echo "  Expected: $EXPECTED_VERSION"
            echo "  Got: $WHEEL_VERSION"
            exit 1
          fi
        done

        echo "âœ“ All wheels have consistent version: $EXPECTED_VERSION"

        # Final confirmation
        echo "ðŸš€ Ready to publish to PyPI:"
        echo "  Git tag: $GIT_TAG"
        echo "  PyPI version: $EXPECTED_VERSION"
        echo "  Wheel count: $(ls dist/*.whl | wc -l)"
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
        packages-dir: dist/

  github-release:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for changelog

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: dist/

    - name: Get Release Draft
      id: get_release_draft
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Only run for stable releases (merged to main)
      if: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}

    - name: Generate dev release notes
      id: dev_release_notes
      if: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') }}
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$LAST_TAG" ]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          git log --format="* %s" --no-merges ${LAST_TAG}..HEAD >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ github.ref_name }}" >> release_notes.md
        else
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "* Initial development release" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}" >> release_notes.md
        fi

        # Set output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release (Dev/Alpha)
      uses: ncipollo/release-action@v1
      if: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') }}
      with:
        tag: ${{ github.ref_name }}
        name: "coldpack ${{ github.ref_name }}"
        body: ${{ steps.dev_release_notes.outputs.notes }}
        artifacts: "dist/*.whl"
        draft: false
        prerelease: true
        generateReleaseNotes: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        makeLatest: false

    - name: Create GitHub Release (Stable)
      uses: ncipollo/release-action@v1
      if: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}
      with:
        tag: ${{ github.ref_name }}
        name: "coldpack ${{ github.ref_name }}"
        body: ${{ steps.get_release_draft.outputs.body }}
        artifacts: "dist/*.whl"
        draft: false
        prerelease: false
        generateReleaseNotes: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        makeLatest: true
