name: Release Drafter

on:
  push:
    branches:
      - main          # Official releases from PR merges
      - 'feature/**'  # Draft releases from feature branches
      - 'dev/**'      # Draft releases from development branches
      - develop       # Draft releases from main development branch
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for commit-based changelog
      
      # Official release notes for main branch (PR-based)
      - name: Update Release Draft (Main Branch)
        if: github.ref == 'refs/heads/main'
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Draft release notes for development branches (commit-based)
      - name: Generate Development Release Notes
        if: github.ref != 'refs/heads/main' && github.event_name == 'push'
        id: dev_release_notes
        run: |
          echo "Generating development release notes from commit messages..."
          
          # Get branch name
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          echo "Branch: $BRANCH_NAME"
          
          # Get commits since last tag or last 10 commits if no tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "## What's Changed (Development)" > dev_notes.md
            echo "" >> dev_notes.md
            echo "**Branch**: \`$BRANCH_NAME\`" >> dev_notes.md
            echo "" >> dev_notes.md
            
            # Parse conventional commits and categorize
            echo "### 🚀 Features" >> dev_notes.md
            git log --format="%s" --no-merges ${LAST_TAG}..HEAD | grep "^feat" | sed 's/^/- /' >> dev_notes.md || true
            echo "" >> dev_notes.md
            
            echo "### 🐛 Bug Fixes" >> dev_notes.md
            git log --format="%s" --no-merges ${LAST_TAG}..HEAD | grep "^fix" | sed 's/^/- /' >> dev_notes.md || true
            echo "" >> dev_notes.md
            
            echo "### 📚 Documentation" >> dev_notes.md
            git log --format="%s" --no-merges ${LAST_TAG}..HEAD | grep "^docs" | sed 's/^/- /' >> dev_notes.md || true
            echo "" >> dev_notes.md
            
            echo "### 🔧 Other Changes" >> dev_notes.md
            git log --format="%s" --no-merges ${LAST_TAG}..HEAD | grep -v "^feat\|^fix\|^docs" | sed 's/^/- /' >> dev_notes.md || true
            echo "" >> dev_notes.md
            
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${BRANCH_NAME}" >> dev_notes.md
          else
            echo "## What's Changed (Development)" > dev_notes.md
            echo "" >> dev_notes.md
            echo "**Branch**: \`$BRANCH_NAME\`" >> dev_notes.md
            echo "" >> dev_notes.md
            echo "- Initial development on this branch" >> dev_notes.md
            echo "" >> dev_notes.md
            echo "**Commits**: https://github.com/${{ github.repository }}/commits/${BRANCH_NAME}" >> dev_notes.md
          fi
          
          # Set output for potential future use
          echo "notes_file=dev_notes.md" >> $GITHUB_OUTPUT
          
          echo "Development release notes generated:"
          cat dev_notes.md
      
      # Also update release draft for PRs (standard behavior)
      - name: Update Release Draft (Pull Request)
        if: github.event_name == 'pull_request'
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}